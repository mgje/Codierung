// Generated by CoffeeScript 1.6.2
(function() {
  var c, code, codes, counts, examples, freq_count, huffman_encoding_table, huffman_table, min_queue, rpad, s, _i, _j, _len, _len1;

  huffman_encoding_table = function(counts) {
    var build_huffman_tree, codes, encode, root;

    build_huffman_tree = function() {
      var a, b, c, cnt, node, q, root;

      q = min_queue();
      for (c in counts) {
        cnt = counts[c];
        q.enqueue(cnt, {
          cnt: cnt,
          c: c
        });
      }
      while (q.size() >= 2) {
        a = q.dequeue();
        b = q.dequeue();
        cnt = a.cnt + b.cnt;
        node = {
          cnt: cnt,
          children: [a, b]
        };
        q.enqueue(cnt, node);
      }
      return root = q.dequeue();
    };
    root = build_huffman_tree();
    codes = {};
    encode = function(node, code) {
      if (node.c != null) {
        return codes[code] = node.c;
      } else {
        encode(node.children[0], code + "0");
        return encode(node.children[1], code + "1");
      }
    };
    encode(root, "");
    return codes;
  };

  min_queue = function() {
    var arr;

    arr = [];
    return {
      enqueue: function(priority, data) {
        var i;

        i = 0;
        while (i < arr.length) {
          if (priority < arr[i].priority) {
            break;
          }
          i += 1;
        }
        return arr.splice(i, 0, {
          priority: priority,
          data: data
        });
      },
      dequeue: function() {
        return arr.shift().data;
      },
      size: function() {
        return arr.length;
      },
      _internal: function() {
        return arr;
      }
    };
  };

  freq_count = function(s) {
    var c, cnts, _i, _len, _ref;

    cnts = {};
    for (_i = 0, _len = s.length; _i < _len; _i++) {
      c = s[_i];
      if ((_ref = cnts[c]) == null) {
        cnts[c] = 0;
      }
      cnts[c] += 1;
    }
    return cnts;
  };

  rpad = function(s, n) {
    while (s.length < n) {
      s += ' ';
    }
    return s;
  };

  examples = ["this is an example for huffman encoding", "abcd", "abbccccddddddddeeeeeeeee"];

  for (_i = 0, _len = examples.length; _i < _len; _i++) {
    s = examples[_i];
    console.log("---- " + s);
    counts = freq_count(s);
    huffman_table = huffman_encoding_table(counts);
    codes = ((function() {
      var _results;

      _results = [];
      for (code in huffman_table) {
        _results.push(code);
      }
      return _results;
    })()).sort();
    for (_j = 0, _len1 = codes.length; _j < _len1; _j++) {
      code = codes[_j];
      c = huffman_table[code];
      console.log("" + (rpad(code, 5)) + ": " + c + " (" + counts[c] + ")");
    }
    console.log();
  }

}).call(this);
