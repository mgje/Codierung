// Generated by CoffeeScript 1.6.2
(function() {
  var appendNode, bt, buildTree, eASCII, eHuffman, el, enc, huff, sInput, wout;

  appendNode = function(inode, onode, name) {
    var child, entry, i, _i, _len;

    if (typeof inode !== "string") {
      entry = {
        name: name,
        children: []
      };
      onode.push(entry);
      i = 0;
      for (_i = 0, _len = inode.length; _i < _len; _i++) {
        child = inode[_i];
        appendNode(child, entry.children, i.toString());
        console.log(i);
        i = i + 1;
      }
      return false;
    } else {
      entry = {
        name: name,
        children: [
          {
            "name": inode
          }
        ]
      };
      if (typeof onode !== "undefined") {
        onode.push(entry);
      }
      return false;
    }
  };

  buildTree = function() {
    var diagonal, e, h, json, link, node, nodes, tjson, tree, vis, w;

    e = document.getElementById("chart");
    e.innerHTML = "";
    tjson = [];
    appendNode(this.treeEncoded, tjson, "Huffman Baum     ");
    json = tjson[0];
    w = 780;
    h = 600;
    tree = d3.layout.tree().size([h, w - 350]);
    diagonal = d3.svg.diagonal().projection(function(d) {
      return [d.y, d.x];
    });
    vis = d3.select("#chart").append("svg").attr("width", w).attr("height", h).append("g").attr("transform", "translate(110, 0)");
    nodes = tree.nodes(json);
    link = vis.selectAll("path.link").data(tree.links(nodes)).enter().append("path").attr("class", "link").attr("d", diagonal);
    node = vis.selectAll("g.node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
      return "translate (" + d.y + "," + d.x + ")";
    });
    node.append("circle").attr("r", 6.4);
    return node.append("text").attr("dx", function(d) {
      if (d.children) {
        return 4;
      } else {
        return 10;
      }
    }).attr("dy", 4).attr("text-anchor", function(d) {
      if (d.children) {
        return "end";
      } else {
        return "start";
      }
    }).text(function(d) {
      return d.name;
    });
  };

  sInput = function(form) {
    var e;

    this.txt = form.value;
    e = document.getElementById("outtext");
    e.innerHTML = this.txt;
    this.encode();
    return false;
  };

  enc = function() {
    var el;

    el = document.getElementById("selectCode");
    if (el.value === "ASCII Codierung") {
      this.encodeASCII();
    } else {
      this.encodeHuffman();
    }
    return this.writeOut();
  };

  wout = function() {
    var e;

    e = document.getElementById("decodeout");
    return e.innerHTML = this.encbin;
  };

  eHuffman = function() {
    var c, encArray, z, _i, _j, _len, _len1, _ref;

    this.huffman = Huffman.treeFromText(this.txt);
    this.enctxt = this.huffman.encode(this.txt);
    encArray = [];
    _ref = this.enctxt;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      encArray.push(c.charCodeAt());
    }
    this.encbin = "";
    for (_j = 0, _len1 = encArray.length; _j < _len1; _j++) {
      z = encArray[_j];
      this.encbin += z.toString(2);
    }
    this.treeEncoded = this.huffman.encodeTree();
    this.genTree();
    return false;
  };

  eASCII = function() {
    var c, encArray, i, n, s, z, _i, _j, _k, _len, _len1, _ref, _results;

    this.enctxt = this.txt;
    encArray = [];
    _ref = this.enctxt;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      encArray.push(c.charCodeAt());
    }
    this.encbin = "";
    _results = [];
    for (_j = 0, _len1 = encArray.length; _j < _len1; _j++) {
      z = encArray[_j];
      s = z.toString(2);
      n = 8 - s.length;
      if (n > 0) {
        for (i = _k = 0; 0 <= n ? _k < n : _k > n; i = 0 <= n ? ++_k : --_k) {
          this.encbin += "0";
        }
      }
      _results.push(this.encbin += s + " ");
    }
    return _results;
  };

  huff = {
    txt: "",
    enctxt: "",
    encbin: "",
    huffman: "",
    treeEncoded: "",
    setInput: sInput,
    encodeASCII: eASCII,
    encodeHuffman: eHuffman,
    encode: enc,
    writeOut: wout,
    genTree: buildTree
  };

  document.forms[0].onkeypress = function(e) {
    if (!e) {
      e = window.event;
    }
    if (e.keyCode === 13) {
      huff.setInput(e.target);
      return false;
    }
  };

  bt = document.forms[0].button;

  bt.onclick = function(e) {
    huff.setInput(e.target.form[0]);
    return false;
  };

  el = document.getElementById("selectCode");

  el.onchange = function(e) {
    huff.encode();
    return false;
  };

}).call(this);
