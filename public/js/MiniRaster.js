// Generated by CoffeeScript 1.6.2
(function() {
  var bt, bt2, clearAllChilds, createCodeBlock, createCodeRows, createRandomMatrix, decodeRLE, defineStyle, encodeRLE, evaluateInput, grid, handleronChange, outCode, updateCell, updateMatrix, wout;

  wout = function(eid, output) {
    var e, t;

    e = clearAllChilds(eid);
    t = document.createTextNode(output);
    e.appendChild(t);
    return false;
  };

  clearAllChilds = function(id) {
    var e;

    e = document.getElementById(id);
    while (e.hasChildNodes()) {
      e.removeChild(e.lastChild);
    }
    return e;
  };

  createCodeBlock = function(k, n) {
    var i, _i, _results;

    _results = [];
    for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
      _results.push("<div id=\"" + (k * grid.col + i) + "\" class=\"smallBox cell\">\n	<div class=\"innerBox null\"></div>\n</div>");
    }
    return _results;
  };

  createCodeRows = function() {
    var j, _i, _ref, _results;

    _results = [];
    for (j = _i = 0, _ref = this.row - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      _results.push("<div class=\"zeile\">\n" + (createCodeBlock(j, this.col - 1).join("")) + " \n</div>");
    }
    return _results;
  };

  defineStyle = function() {
    this.element.style.width = "" + (this.col * 12) + "px";
    return this.element.style.height = "" + (this.row * 12) + "px";
  };

  updateCell = function(i, s) {
    var el, inp;

    el = document.getElementById(i);
    inp = el.getElementsByClassName("numberInput")[0];
    return inp.value = s;
  };

  handleronChange = function(e) {
    var el, id, st;

    el = e.target;
    st = el.className;
    id = parseInt(el.parentElement.id);
    if (st === "innerBox null") {
      el.className = "innerBox eins";
      grid.matrix[id] = 1;
    }
    if (st === "innerBox eins") {
      el.className = "innerBox null";
      grid.matrix[id] = 0;
    }
    return false;
  };

  createRandomMatrix = function() {
    var d, x, y, z, _i, _j, _ref, _ref1;

    for (y = _i = 0, _ref = this.row; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      for (x = _j = 0, _ref1 = this.col; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        d = Math.random();
        z = Math.floor(2 * d);
        this.matrix[y * this.col + x] = z;
      }
    }
    return false;
  };

  updateMatrix = function() {
    var e, id, x, y, _i, _ref, _results;

    _results = [];
    for (y = _i = 0, _ref = this.row; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;

        _results1 = [];
        for (x = _j = 0, _ref1 = this.col; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          id = y * this.col + x;
          e = (document.getElementById(id)).getElementsByTagName("div");
          if (this.matrix[id] === 0) {
            e[0].className = "innerBox null";
          }
          if (this.matrix[id] === 1) {
            _results1.push(e[0].className = "innerBox eins");
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  encodeRLE = function() {
    var farbe, pixel, z, _i, _len, _ref;

    this.code = [];
    this.code.push(this.col);
    farbe = 0;
    z = 0;
    _ref = this.matrix;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pixel = _ref[_i];
      if (pixel === farbe) {
        z = z + 1;
      } else {
        this.code.push(z);
        z = 1;
        if (farbe === 0) {
          farbe = 1;
        } else {
          farbe = 0;
        }
      }
    }
    this.code.push(z);
    return this.code.join();
  };

  decodeRLE = function() {
    var c, farb, i, _i, _j, _len, _ref;

    this.col = this.code.shift();
    this.matrix = [];
    farb = 0;
    _ref = this.code;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      for (i = _j = 0; 0 <= c ? _j < c : _j > c; i = 0 <= c ? ++_j : --_j) {
        this.matrix.push(farb);
      }
      if (farb === 0) {
        farb = 1;
      } else {
        farb = 0;
      }
    }
    this.row = Math.floor(this.matrix.length / this.col);
    if (this.row !== Math.round(this.matrix.length / this.col)) {
      return this.row += 1;
    }
  };

  evaluateInput = function(form) {
    var input, z, zm, _i, _len, _ref;

    input = form.value;
    zm = [];
    _ref = input.split(',');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      z = _ref[_i];
      zm.push(parseInt(z));
    }
    this.code = zm;
    this.decRLE();
    this.element.innerHTML = grid.createGrid().join('');
    this.defgridborder();
    return this.updateMat();
  };

  outCode = function() {
    return wout("codeout", this.enRLE());
  };

  grid = {
    row: 50,
    col: 50,
    matrix: [],
    code: [],
    createGrid: createCodeRows,
    defgridborder: defineStyle,
    createMat: createRandomMatrix,
    updateMat: updateMatrix,
    enRLE: encodeRLE,
    evalinp: evaluateInput,
    decRLE: decodeRLE,
    outCodeToForm: outCode
  };

  grid.element = document.getElementById("code");

  grid.element.innerHTML = grid.createGrid().join('');

  grid.defgridborder();

  grid.element.addEventListener("click", handleronChange, false);

  grid.createMat();

  grid.updateMat();

  grid.enRLE();

  document.forms[0].onkeypress = function(e) {
    if (!e) {
      e = window.event;
    }
    if (e.keyCode === 13) {
      grid.evalinp(e.target);
      return false;
    }
  };

  bt = document.forms[0].button;

  bt.onclick = function(e) {
    grid.evalinp(e.target.form[0]);
    return false;
  };

  bt2 = document.forms[1].button;

  bt2.onclick = function(e) {
    grid.outCodeToForm();
    return false;
  };

}).call(this);
